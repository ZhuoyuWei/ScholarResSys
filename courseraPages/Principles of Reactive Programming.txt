{"about_the_course":"<p>This is a follow-on for the Coursera class \u201cPrinciples of Functional Programming in Scala\u201d, which so far had more than 100\u2019000 inscriptions over two iterations of the course, with some of the highest completion rates of any massive open online course worldwide.</p><p>The aim of the second course is to teach the principles of reactive programming. Reactive programming is an emerging discipline which combines concurrency and event-based and asynchronous systems. It is essential for writing any kind of web-service or distributed system and is also at the core of many high-performance concurrent systems. Reactive programming can be seen as a natural extension of higher-order functional programming to concurrent systems that deal with distributed state&nbsp;by coordinating and orchestrating asynchronous data streams exchanged by actors.</p><p>In this course you will discover key elements for writing reactive programs in a composable way. You will find out how to apply these building blocks in the construction of event-driven systems that are scalable and resilient.</p>The course is hands on; most units introduce short programs that serve as illustrations of important concepts and invite you to play with them, modifying and improving them. The course is complemented by a series of assignments, which are also programming projects.<br><br><div><b>Personalized Tutoring by Typesafe</b>: Typesafe offers supervised tutorial sessions accompanying select Coursera classes. In weekly, one-hour tutorial sessions experts from Typesafe provide in-depth answers to questions about the course material, and discuss solutions to homework assignments past the deadline. Tutorial groups are small (10 participants max) in order to meet individual mentoring needs as much as possible. Tutorial session slots are offered in both European and American time zones. <a href=\"https://attendee.gototraining.com/4q80l/catalog/4020625203792931584\" target=\"_blank\">Registration for tutoring by Typesafe is open</a>.</div>","subtitle_languages_csv":"","other_description":"","photo":"https://coursera-course-photos.s3.amazonaws.com/48/87ad9974a90a93b925e6861a8a15a1/principles-reactive-v1.0.jpg","preview_link":null,"small_icon_hover":"https://coursera-course-photos.s3.amazonaws.com/cd/9621270b46581ec73e52c6fb16aa02/principles-reactive-v1.0.jpg","large_icon":"https://coursera-course-photos.s3.amazonaws.com/1c/52b9de790b83e6c020c5884a689607/principles-reactive-v1.0.jpg","video":"lwXF0LQd2-k","university-ids":["epfl"],"video_baseurl":"https://d1a2y8pfnfh44t.cloudfront.net/lwXF0LQd2-k/","id":987,"universities":[{"rectangular_logo_svg":"https://coursera-university-assets.s3.amazonaws.com/89/7f14b8c6f54b56a2446c99b2b8df86/EPFL_LOG_QUADRI_Red_resized.svg","wordmark":null,"website_twitter":"EPFL","china_mirror":1,"favicon":"https://coursera-university-assets.s3.amazonaws.com/ba/142188830b51c8c51b95cc25e5dbf3/epflfav.png","website_facebook":"EPFL.ch","logo":"https://coursera-university-assets.s3.amazonaws.com/1d/0a73c737b332745aac47797f57cda4/logo-epfl-front.png","background_color":"","id":16,"location_city":"Lausanne","location_country":"CH","location_lat":46.51996170000000000,"location":"Lausanne, Switzerland","primary_color":"#7E000C","abbr_name":"EPFL","website":"http://www.epfl.ch/","description":"","short_name":"epfl","landing_page_banner":"https://coursera-university-assets.s3.amazonaws.com/22/b50d471bc34471c5a7c696b1d714cc/rolex_learning_center.jpg","mailing_list_id":null,"website_youtube":"user/epflnews","partner_type":1,"banner":"https://coursera-university-assets.s3.amazonaws.com/ab/bb616e071f67f5bcaead9b67dbaa36/banner-epfl.jpg","location_state":"VD","name":"\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne","square_logo":"https://coursera-university-assets.s3.amazonaws.com/01/a5c9c211331132096e7ba9942dbd51/square_epfl_400.png","square_logo_source":"https://coursera-university-assets.s3.amazonaws.com/5f/f441e9c1630625018763c3b86cf582/square_epfl_400.png","square_logo_svg":"https://coursera-university-assets.s3.amazonaws.com/a7/fca9be507583b1f25e0fcd9fca0d59/square_epfl_400.svg","location_lng":6.63359709999997450,"home_link":null,"class_logo":"","display":true}],"self_service_course_id":null,"short_description":"Learn how to write composable software that is event-driven, scalable under load, resilient and responsive in the presence of failures. Model systems after human organizations or inter-human communication.","description":"","short_name":"reactive","target_audience":1,"faq":"<ul><li><p><b>Will I get a certificate after completing this class?</b><br><br>Yes. Students who successfully complete the class will receive a certificate signed by the instructor.<br></p></li><li><p><b>What resources will I need for this class?</b><br><br>You should have the following installed: - Java Virtual Machine JDK 1.6 or higher. - A Scala distribution version 2.10 or higher The recommended development environment for the course is the Scala IDE for Eclipse. It comes with a Scala distribution so if you intend to work only in Eclipse you just need to install the Scala IDE.<br></p></li><li><b>What is the coolest thing I'll learn if I take this class?</b><br><br>You will learn how to write programs which scale from one mobile phone up to thousands of servers.</li></ul>","category-ids":["cs-programming"],"visibility":0,"course_syllabus":"<p><b>Week 1</b>: Review of Principles of Functional Programming: substitution model, for-expressions and how they relate to monads. Introduces a new implementation of for-expressions: random value generators. Shows how this can be used in randomized testing and gives an overview of ScalaCheck, a tool which implements this idea.</p><p><b>Week 2</b>: Functional programming and mutable state. What makes an object mutable? How this impacts the substitution model. Extended example: Digital circuit simulation.</p><p><b>Week 3</b>: Futures. Introduces futures as another monad, with for-expressions as concrete syntax. Shows how futures can be composed to avoid thread blocking. Discusses cross-thread error handling.</p><p><b>Week 4</b>: Reactive stream processing. \u00a0Generalizing futures to reactive computations over streams. Stream operators.</p><p><b>Week 5</b>: Actors. Introduces the Actor Model, actors as encapsulated units of consistency, asynchronous message passing, discusses different message delivery semantics (at most once, at least once, exactly once) and eventual consistency.</p><p><b>Week 6</b>: Supervision. Introduces reification of failure, hierarchical failure handling, the Error Kernel pattern, lifecycle monitoring, discusses transient and persistent state.</p><b>Week 7</b>: Conversation Patterns. Discusses the management of conversational state between actors and patterns for flow control, routing of messages to pools of actors for resilience or load balancing, acknowledgement of reception to achieve reliable delivery.","course_format":"The class will consist of lecture videos, which are between 6 and 20 minutes in length. These contain integrated quiz questions per video. There will also be standalone homeworks that are not part of video lectures.","has_full_data":true,"small_icon":"https://coursera-course-photos.s3.amazonaws.com/cd/9621270b46581ec73e52c6fb16aa02/principles-reactive-v1.0.jpg","suggested_readings":"The class is designed to be self-contained, based on the ideas expressed in the\u00a0<a href=\"http://www.reactivemanifesto.org/\">Reactive Manifesto</a>. For further reading on data structures and language concepts we recommend\u00a0<a href=\"http://www.chegg.com/textbooks/9780262510875\">Structure and Interpretation of Computer Programs - 2nd Edition (MIT Electrical Engineering and Computer Science)</a>\n<img width=\"1\" src=\"https://lh5.googleusercontent.com/sU_20JH7R5WpHH9FMKKYyDuZwARp9_CMe1EoPPnG5_ys8w5PnZgKDd4YR_J7l0xtzJTVNZweEbSZppGFkCcNzWRZ4qgwJ7iTWzAmZVFo8p_i_aiwtc8Q6A1uCA\" height=\"1\">\u00a0by Abelson and Sussman, published by MIT Press. For further reading on concurrent systems we recommend <a href=\"http://www.chegg.com/textbooks/0262220695\" target=\"_blank\">Concepts, Techniques and Models of Computer Programming</a> by Peter van Roy\n    and Seif Haridi, published by MIT Press. For learning more about Scala, we recommend\u00a0<a href=\"http://www.chegg.com/textbooks/9780981531649\">Programming in Scala: A Comprehensive Step-by-Step Guide, 2nd Edition</a>\n    <img width=\"1\" src=\"https://lh4.googleusercontent.com/R9ilstaFMkgYTAs9tB4VHVr4bKYE9EcPVmViBNsNf06YbzbtrMKmDGJj1fZF0yGVaQd54LikyF1Wfxiz4xp5E27rDK2ZDhZ10VbwCv0p0bBGfkkgawNUlbolrA\" height=\"1\">\u00a0by Odersky, Spoon and Venners, published by Artima Press, or else\u00a0<a href=\"http://www.chegg.com/textbooks/9780321774095\">Scala for the Impatient</a>\n        <img width=\"1\" src=\"https://lh4.googleusercontent.com/W-CNh1yWJpRXeBP0By4Gd0_s2Vue696wtotdFi85b2xUhYJqJZm0NjTURfpFnUajn5CzhN64E3wowyt803ovlOH0FfWp6fmuq4NPgRqprREz8vVpsk3YPNJPBQ\" height=\"1\">, by Horstmann, published by Addison Wesley.","instructor":null,"categories":[{"id":12,"name":"Computer Science: Software Engineering","mailing_list_id":null,"short_name":"cs-programming","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"}],"estimated_class_workload":"5-7 hours/week","name":"Principles of Reactive Programming","language":"en","university_logo_st":"","video_id":null,"courses":[{"grading_policy_distinction":"","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":4,"duration_string":"7 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":"","certificate_ready_user_id":null,"id":971465,"start_month":11,"certificate_description":"","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":null,"certificates_ready":false,"signature_track_price":null,"statement_design_id":null,"signature_track_registration_open":false,"topic_id":987,"eligible_for_signature_track":false,"start_date":null,"status":1,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[13089,672627,1337605],"end_of_class_emails_sent":null,"active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"001","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/reactive-001/","creator_id":628123,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":null}],"about_the_instructor":"","university_logo":"","course-ids":[971465],"display":true,"recommended_background":"You should have a background equivalent to someone who completed the course \u201cPrinciples of Functional Programming\u201d. We assume you know the fundamentals of functional programming and the Scala language."}

