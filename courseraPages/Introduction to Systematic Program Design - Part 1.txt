{"about_the_course":"<p>Phones, diesel engines, animated newspapers, medical devices, games, political\n    campaigns, medical research, mining, transportation systems, ... and so\n    on, and on, and on... every day more of the world around us is at least\n    partly run by computer programs. This means that being able to design programs\n    - or at least be able to work with people who design programs - is becoming\n    a more and more valuable skill.</p>\n<p>To build your own programs you need to know two things: how to use the\n    specific programming language and libraries needed, and the more general\n    skill of how to design a program.</p>\n<p>This course presents a <b>design method</b> that will enable you to approach\n    the design of complex programs systematically. The method will work for\n    programs in this course as well as hard to design programs you develop\n    in the future.</p>\n<p>Using this method you will learn how to model the information in a problem\n    domain, how to structure program data to mirror that information and how\n    to further structure the data to lead to a well organized program. You\n    will also learn to distinguish those parts of a program that are naturally\n    data driven, from those that should use an alternative algorithmic approach.\n    The method uses unit-tests to both produce a better developed design, and\n    to test your program as you develop it.</p>\n<p>In the first course -- Part 1 -- we use a simple\n    teaching language to cover the core of the design method. In Part 1 we cover various forms of data; simple interactive programs like games and animations; storing information in and rendering trees; and finally exploring search programs: programs that solve puzzles like Sudoku boards.&nbsp;</p><p>A second phase of the course, to be offered later, &nbsp;will consist of parallel tracks, with each track using a different popular\n    programming language and focusing on a different kind of problem. This\n    will help you bring the design method to whatever language and problem\n    domain interests you.<br></p>","subtitle_languages_csv":"","other_description":"","photo":"https://coursera-course-photos.s3.amazonaws.com/e7/a9c4480054bf8b689e86f5cf9f99e3/IntroSystematic_1280x720.jpg","preview_link":null,"small_icon_hover":"https://coursera-course-photos.s3.amazonaws.com/35/e8609391fde9df1c434fb9ac0ee1c4/IntroSystematic_1280x720.jpg","large_icon":"https://coursera-course-photos.s3.amazonaws.com/78/95379b3e2298c62886f84192aaf6ee/IntroSystematic_1280x720.jpg","video":"_2O5CUVch-g","university-ids":["ubc"],"video_baseurl":"https://d1a2y8pfnfh44t.cloudfront.net/_2O5CUVch-g/","id":233,"universities":[{"rectangular_logo_svg":"https://coursera-university-assets.s3.amazonaws.com/a3/e2cb8d1fb2040ef7abcfcb42975509/UBC-logo.svg","wordmark":null,"website_twitter":"ubcaplaceofmind","china_mirror":2,"favicon":"https://coursera-university-assets.s3.amazonaws.com/d1/159770b1b64f0bb3736e0a1ad5144b/favicon.ico","website_facebook":"universityofbc","logo":"https://coursera-university-assets.s3.amazonaws.com/d1/4b45f1fa68329d09b869d990e5d48e/panel_signature3.png","background_color":"","id":29,"location_city":"Vancouver","location_country":"CA","location_lat":49.26487800000000000,"location":"The University of British Columbia, West Mall, Vancouver, BC, Canada","primary_color":"#0F2144","abbr_name":"UBC","website":"http://www.ubc.ca/","description":"The University of British Columbia is a global centre for research and teaching.","short_name":"ubc","landing_page_banner":"https://coursera-university-assets.s3.amazonaws.com/1f/1a1a7375877cd97e0d8b02301e42e7/UBC-Coursera-Banner-1280x320.jpg","mailing_list_id":null,"website_youtube":"user/ubc","partner_type":1,"banner":"https://coursera-university-assets.s3.amazonaws.com/dd/396bbc8612e8d7bd419bdffa4c9f36/ubc4.jpg","location_state":"BC","name":"The University of British Columbia","square_logo":"https://coursera-university-assets.s3.amazonaws.com/38/521e5807d761297a1cf2dcc56ede8e/UBC-Coursera-Avatar-360x360.png","square_logo_source":"https://coursera-university-assets.s3.amazonaws.com/cc/5fd6b4afd6c4f42d006c13bcb3a3ff/UBC-Coursera-Avatar-360x360.jpg","square_logo_svg":"","location_lng":-123.25249600000001000,"home_link":"","class_logo":"https://coursera-university-assets.s3.amazonaws.com/1f/a1b550b8642963fd065c0315202ded/UBC-Coursera-Signature-200x48-v2.png","display":true}],"self_service_course_id":null,"short_description":"This course is about learning to program well: building programs that are elegant, well tested and easy to maintain.  The course is designed for students with no programming experience at all. Nonetheless, former students who already knew how to program have said it made them better programmers.","description":"","short_name":"programdesign","target_audience":0,"faq":"<p><b>Can students ask questions?</b>\n    <br>\n</p>\n<p>We will use an on-line discussion group to enable students to ask and\n    answer questions. Course staff will monitor the group to ensure accuracy\n    of student answers as well as to handle unanswered questions.</p>\n<p><b>What programming languages will the\ncourse use?</b>\n</p>This course -- Part 1 of a 2 course sequence -- uses a teaching language called Beginning\nStudent Language. Part 2 will be broken into parallel\ntracks that tackle problems in different domains using one or more popular\nlanguages such as Python and Javascript.<br><br><strong>What resources will I need for this class?<br></strong><br>For this course all you need is an internet connection and a computer. The software we will use is available for free download, and the supplementary text is also available online for free.","category-ids":["cs-programming"],"visibility":0,"course_syllabus":"<p>\nWeek One: Introduction and the structure of the course. The Beginning\nStudent Language; expressions and evaluation rules; primitive\noperations on numbers, strings and images. The How to Design Functions\n(HtDF) Recipe.\n</p>\n\n<p>\nWeek Two: Representing information as data. The How to Design Data\n(HtDD) recipe. Atomic forms of data including intervals, enumerations,\nand itemizations.\n</p>\n\n<p>\nWeek Three: The design of simple interactive programs. The big-bang\nuser interface framework. The How to Design Worlds (HtDW)\nrecipe. Representing information where two or more values naturally\nform a whole using compound data.\n</p>\n\n<p>\nWeek Four: Representing arbitrary sized information using\nlists. Decomposition of information into multiple types.\n</p>\n\n<p>\nWeek Five: Functions operating on natural numbers. A parlor\ntrick. Rules for decomposing functions.\n</p>\n\n<p>\nWeek Six: List abbreviations. Mutual reference allows more complex\narbitrary-sized data. Using binary trees to enable fast lookup of\ninformation. Using arbitrary arity trees to represent inherently\nhierarchical information.\n</p>\n\n<p>\nWeek Seven: Functions that consume two arguments that have 'one-of' in\ntheir types. Using local definitions to improve the structure of\nprograms.\n</p>\n\n<p>\nWeek Eight: Using abstraction to control reduce repetition and\ncomplexity in programs.\n</p>\n\n<p>\nWeek Nine: Generative recursion, fractals and search problems.\n</p>","course_format":"The course will include weekly video lecture material as well as assigned\ndesign problems. There will also be two small projects and a final exam. Because programs must be written to be read by others the two projects will be peer graded. This will give students experience with reading code written by peers and having their code evaluated by peers.","has_full_data":true,"small_icon":"https://coursera-course-photos.s3.amazonaws.com/35/e8609391fde9df1c434fb9ac0ee1c4/IntroSystematic_1280x720.jpg","suggested_readings":"A detailed description of the design method, as\nwell as weekly lecture notes will be available online. No textbook is required,\nbut the second edition of <i>How to Design Programs</i>, by Felleisen, Findler, Flatt and\nKrishnamurthi is valuable supplementary reading; the book is available online at no cost.","instructor":"Gregor Kiczales","categories":[{"id":12,"name":"Computer Science: Software Engineering","mailing_list_id":null,"short_name":"cs-programming","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"}],"estimated_class_workload":"8-12 hours/week","name":"Introduction to Systematic Program Design - Part 1","language":"en","university_logo_st":null,"video_id":null,"courses":[{"grading_policy_distinction":"The final grade was based on weekly quizzes (40% of grade), two projects (30%) and a final exam (30%).\n","ace_track_price_display":null,"signature_track_certificate_design_id":112,"ace_semester_hours":null,"start_day":3,"duration_string":"8 weeks","signature_track_last_chance_time":"2013-06-17","signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":970256,"start_month":6,"certificate_description":"This undergraduate course provides an introduction to the systematic design of computer programs.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":69.00,"grades_release_date":"2013-09-11","certificates_ready":true,"signature_track_price":39.00,"statement_design_id":100,"signature_track_registration_open":false,"topic_id":233,"eligible_for_signature_track":true,"start_date":null,"status":0,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[359948],"end_of_class_emails_sent":"2013-07-26","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"001","textbooks":[],"signature_track_open_time":"2013-05-15","eligible_for_ACE":false,"grading_policy_normal":"The final grade was based on weekly quizzes (40% of grade), two projects (30%) and a final exam (30%).\n","ace_open_date":null,"signature_track_last_refund_date":"2013-07-09","home_link":"https://class.coursera.org/programdesign-001/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":"2013-06-25","auth_review_completion_date":"2013-07-26"},{"grading_policy_distinction":"40% - Homework: There are homework assignments for each module of the course. The actual assignments are not handed in or graded. Instead there is a short graded homework-quiz you will do after completing the homework.\n\n35% - 2 peer graded projects.\n\n25% - Peer graded final exam\n","ace_track_price_display":null,"signature_track_certificate_design_id":112,"ace_semester_hours":null,"start_day":4,"duration_string":"10 weeks","signature_track_last_chance_time":"2013-09-18","signature_track_additional_notes":"","certificate_ready_user_id":359948,"id":971286,"start_month":9,"certificate_description":"A 10 week introduction to a method for systematic program design. Learners who complete this course will have a solid foundation in how to approach the design of small programs systematically and produce code that is easy to read and well tested.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":49.00,"grades_release_date":"2013-11-26","certificates_ready":true,"signature_track_price":49.00,"statement_design_id":100,"signature_track_registration_open":false,"topic_id":233,"eligible_for_signature_track":true,"start_date":null,"status":1,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[359948],"end_of_class_emails_sent":"2013-11-26","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"002","textbooks":[],"signature_track_open_time":"2013-08-22","eligible_for_ACE":false,"grading_policy_normal":"40% - Homework: There are homework assignments for each module of the course. The actual assignments are not handed in or graded. Instead there is a short graded homework-quiz you will do after completing the homework.\n\n35% - 2 peer graded projects.\n\n25% - Peer graded final exam\n","ace_open_date":null,"signature_track_last_refund_date":"2013-10-09","home_link":"https://class.coursera.org/programdesign-002/","creator_id":359948,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":"2013-09-25","auth_review_completion_date":"2013-11-26"}],"about_the_instructor":"<span><img src=\"https://coursera-topic-photos.s3.amazonaws.com/e9/8a0e38f5615f58e9e9ea8e09800f4e/gregor-kiczales.jpg\" class=\"coursera-instructor-thumb\">Gregor Kiczales is a professor in the Computer\nScience Department at the University of British Columbia. His work is directed\nat enabling programmers to write programs that, as much as possible, look like their\ndesign.&nbsp;&nbsp;He is best known for his work on aspect-oriented programming,\nand he led the Xerox PARC team that developed aspect-oriented programming and\nAspectJ. He is a co-author of \"The Art of the Metaobject Protocol\"\nand was one of the designers of the Common Lisp Object System (CLOS). In 2012\nhe was the recipient of the Dahl-Nygaard Senior Prize for his achievements in\nprogramming language design research.</span>","university_logo":"","course-ids":[970256,971286],"display":true,"recommended_background":"No prior programming experience is assumed, and only a grade school math  background is required."}

