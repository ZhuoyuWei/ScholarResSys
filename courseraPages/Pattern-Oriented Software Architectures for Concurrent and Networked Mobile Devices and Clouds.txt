{"about_the_course":"<p>The confluence of multi-core and distributed-core processors, inexpensive mass storage, ubiquitous wireless connectivity, and commodity software platforms is driving the need for\u00a0software engineers and programmers\u00a0who understand how to develop\n    concurrent\u00a0and networked software for mobile devices that connect to cloud computing platforms. Despite many improvements in processors, storage, and networks, however, developing quality software on-time and on-budget remains hard. Moreover,\n    developing high quality <i>reusable\n</i> concurrent and\u00a0networked software apps and services is even harder. \u00a0The principles, methods, and\u00a0skills required to develop such software are best learned by\u00a0attaining mastery of\u00a0<i>patterns</i>, <i>pattern languages</i>,\n    and <i>frameworks</i>.</p>\n<p>\n\n    A <a href=\"http://en.wikipedia.org/wiki/Software_design_pattern\">pattern</a>\u00a0describes a reusable solution to a common problem that arises within a particular context. When related patterns are woven together they form a <a href=\"http://en.wikipedia.org/wiki/Pattern_language\">pattern language</a> that\n    defines a vocabulary and a process for the orderly resolution of software development problems. A\u00a0<a href=\"http://en.wikipedia.org/wiki/Software_framework\" title=\"Link: http://en.wikipedia.org/wiki/Software_framework\">framework</a>\u00a0is an integrated set of components that collaborate to provide a reusable\n    architecture for a family of related apps or services. \u00a0Frameworks can also be viewed as concrete realizations of pattern languages that facilitate direct reuse of detailed design and source code.</p>\n<p>\n\n    This course describes <i>by example</i> how to apply patterns, pattern languages, and frameworks to\u00a0alleviate the complexity of developing concurrent and networked\u00a0software for mobile devices and clouds via the use of object-oriented design\n    techniques, <a href=\"http://en.wikipedia.org/wiki/Java_(programming_language)\" target=\"_blank\">Java</a> programming language features,\u00a0<a href=\"http://developer.android.com/\" target=\"_blank\">Android\u00a0</a>and <a href=\"http://www.eclipse.org/jetty/\" target=\"_blank\">Jetty</a>\u00a0middleware, <a href=\"http://en.wikipedia.org/wiki/Linux\" target=\"_blank\">Linux</a> operating\u00a0system mechanisms, and <a href=\"http://en.wikipedia.org/wiki/Cloud_computing\" target=\"_blank\">cloud computing</a> platforms,\n    such as <a href=\"https://developers.google.com/appengine/\" target=\"_blank\">Google App Engine</a>. An extended case study project will be used throughout the course to showcase pattern-oriented software design and programming techniques\u00a0for concurrent\n    and networked mobile devices and clouds.</p>\n<p><b>Note: This course is part of a cross-institution course sequence</b>.\u00a0</p>\n<p>This course and another, led by Dr. Adam Porter from the University of Maryland, have been designed to complement each other. \u00a0Therefore, some of the programming assignments and the course project for both courses will be coordinated. The University\n    of Maryland course, <a href=\"https://www.coursera.org/course/android\" target=\"_blank\">Programming Handheld Systems with Android</a>, will\u00a0focus on the design and programming of user-facing applications, and will be taught first. \u00a0This\u00a0course\n    focuses on systems programming topics, such as server-side Android concurrency, background processing, networking, and computing cloud integration, and will be taught second. \u00a0The University of Maryland course is currently scheduled to be taught\n    in January 2014.\u00a0</p>\n<p>Nevertheless, each of these courses stands alone. Students are not required to take both. Those who do, however, will gain a much more detailed,\u00a0end-to-end\u00a0understanding of handheld systems, their apps, and their integration into the cloud.</p>","subtitle_languages_csv":"","other_description":"","photo":"https://coursera-course-photos.s3.amazonaws.com/6a/a304d2720149e3ae422acbfda19f6d/foos.jpg","preview_link":"https://class.coursera.org/posa-001/lecture/preview","small_icon_hover":"https://coursera-course-photos.s3.amazonaws.com/6b/353126287516432c828eb1bbdb6c44/foos.jpg","large_icon":"https://coursera-course-photos.s3.amazonaws.com/c8/1ad9b05582057b1c1caa7f9d7755fd/foos.jpg","video":"vYP4KqpsvFs","university-ids":["vanderbilt"],"video_baseurl":"https://d1a2y8pfnfh44t.cloudfront.net/vYP4KqpsvFs/","id":234,"universities":[{"rectangular_logo_svg":"https://coursera-university-assets.s3.amazonaws.com/5f/efe6c18424e8b389d27cf695278a01/Certificate-WideLogo.svg","wordmark":null,"website_twitter":"vanderbiltu","china_mirror":1,"favicon":"https://coursera-university-assets.s3.amazonaws.com/76/5bf77c95f3afdcd6ff0c88fbf95693/vanderbilt_16x16_b.png","website_facebook":"vanderbilt","logo":"https://coursera-university-assets.s3.amazonaws.com/d2/12379e6f5878e9a8e8df310afe7e26/vanderbilt_160x60.png","background_color":"","id":37,"location_city":"Nashville","location_country":"US","location_lat":36.16666670000000000,"location":"Nashville, TN, USA","primary_color":"#5A0F3B","abbr_name":"Vanderbilt","website":"http://www.vanderbilt.edu/","description":"Vanderbilt University, located in Nashville, Tenn., is a private research university and medical center offering a full-range of undergraduate, graduate and professional degrees.","short_name":"vanderbilt","landing_page_banner":"https://coursera-university-assets.s3.amazonaws.com/2f/42ef92a0781fdae4b1e6bd739d054f/Vanderbilt-Coursera-1280x320.jpg","mailing_list_id":null,"website_youtube":"vanderbilt","partner_type":1,"banner":"https://coursera-university-assets.s3.amazonaws.com/d6/14e4aacad098aa3b2e2b3cda3112d1/vanderbilt_928x220.jpg","location_state":"TN","name":"Vanderbilt University","square_logo":"https://coursera-university-assets.s3.amazonaws.com/8f/64ec0b2f7b95b23b7e5f0537131e9c/Vanderbilt-Coursera-360x360.png","square_logo_source":"https://coursera-university-assets.s3.amazonaws.com/77/a41dee6237efd36fc2d22a7536acbe/Vanderbilt-Coursera-360x360.png","square_logo_svg":"https://coursera-university-assets.s3.amazonaws.com/95/017818e00392a394c55112d2a726b4/Vanderbilt-Coursera.svg","location_lng":-86.78333329999998000,"home_link":null,"class_logo":"https://coursera-university-assets.s3.amazonaws.com/1d/89ec947a4081dd88dcea207ad21a59/vu02a_200x48.png","display":true}],"self_service_course_id":null,"short_description":"In this course we will learn how to apply patterns, pattern languages, and frameworks to alleviate the complexity of developing concurrent and networked software for mobile devices running Android that connect to cloud computing platforms.  \n","description":"","short_name":"posa","target_audience":1,"faq":"The FAQ for the course is available <a href=\"https://class.coursera.org/posa-001/wiki/view?page=FrequentlyAskedQuestions\">here</a>.","category-ids":["infotech","cs-systems","cs-programming"],"visibility":0,"course_syllabus":"<p>The course is organized as follows:</p>\n\n<ul>\n    <li>\n        <p><strong>Section 0: Overview of all the topics covered in\n        the course</strong>, which helps you visualize the motivations\n        for --and challenges of-- concurrent and networked software\n        for mobile devices running <a href=\"http://developer.android.com\">Android</a> and cloud\n        computing platforms, such as <a href=\"https://developers.google.com/appengine/\" title=\"Link: https://developers.google.com/appengine/\">Google App\n        Engine</a>. We also describe what patterns and frameworks are\n        and explain by example how they help address key challenges of\n        concurrent and networked software in mobile devices and\n        clouds. </p>\n    </li>\n    <li>\n        <p><strong>Section 1: Introduction to concurrency and networking</strong>\u00a0<b>in Android</b>, which provides background info pertaining largely to the operating system and middleware layers. We discuss key design dimensions of concurrent and\n            networked software, as well as review common operating system and Android programming mechanisms. This part focuses largely on concepts and shows examples in the Java programming language.</p>\n    </li>\n    <li>\n        <p><strong>Section 2: Overview of patterns and frameworks for Android systems programming</strong>, which focuses on pattern-oriented software architecture, with an emphasis on concurrent and networked programming in Android via Services, Content\n            Providers, Broadcast Receivers, and various local and remote interprocess communication (IPC) mechanisms supported on the Android platform. We explore key pattern and framework concepts, relationships, and examples, as well as evaluate the\n            pros and cons of patterns and frameworks. Many code examples are shown throughout using Java, with a case study project used to reify the key points throughout all the modules in this section.</p>\n    </li>\n    <li>\n         <p><strong>Section 3: Applying patterns and frameworks to\ndevelop concurrent and networked software\u00a0in the cloud</strong>,\nwhich uses an open-source server as a running example to illustrate\npatterns and frameworks pertaining to service access, communication,\nsynchronous event handling, connection establishment, service\ninitialization, service configuration and activation, concurrency and\nsynchronization, asynchronous event handling, and security. The bulk of the\nexamples are in Java using the\u00a0<a href=\"http://www.eclipse.org/jetty/\" target=\"_blank\">Jetty</a>\u00a0middleware platform running an the <a href=\"https://developers.google.com/appengine/\" title=\"Link: https://developers.google.com/appengine/\">Google App\nEngine</a>.</p>\n    </li>\n</ul>\n\n<p>The PDF and PowerPoint versions of all the slides used in the course will be available online as the videos become available on the course website.</p>","course_format":"<div>The class will consist of lecture videos with integrated quiz\u00a0questions designed to ensure you understand the material covered in the videos.\u00a0\u00a0In recognition that not all participants have the same learning objectives or available time, the course is offered at two levels of engagement:<br>\u00a0<br><b>NormalTrack</b> \u2013 Estimated Time Commitment:\u00a0\u00a03 \u2013\u00a05 Hours Per Week<br>Students at this level receive a <u><i>Statement of Accomplishment</i></u> that certifies advanced proficiency with the course concepts, which\u00a0will be assessed by weekly auto-graded standalone quizzes.\u00a0 This track is designed for those who wish to engage the material by doing the auto-graded quizzes, final exam, and participating in the online discussion forums, but who may not have the time/interest to complete the peer-graded short essay questions and auto-/peer-graded programming assignments.<br>\u00a0<br><b>DistinctionTrack</b> \u2013 Estimated Time Commitment:\u00a05 \u2013\u00a07 Hours Per Week<br>Students at this level will receive a <u><i>Statement of Accomplishment with Distinction</i></u> that certifies greater mastery of the practice of the course content.\u00a0 In addition to completing the auto-graded weekly quizzes and final exam from the Standard Track, students in this track will also complete peer-graded short essays and auto-/peer-graded programming assignments.  The programming assignments will involve writing concurrent and networked software in popular pattern-oriented software architecture frameworks written in Java, such as <a href=\"http://developer.android.com/\">Android</a>\u00a0and\u00a0<a href=\"http://www.eclipse.org/jetty/\" target=\"_blank\">Jetty</a>.  This track is designed for those students wishing to achieve mastery of the course material and to understand its application in realistic project context.\u00a0</div>","has_full_data":true,"small_icon":"https://coursera-course-photos.s3.amazonaws.com/6b/353126287516432c828eb1bbdb6c44/foos.jpg","suggested_readings":"Although the lectures are designed to be largely self-contained, it's recommended (but not required) that students refer to the following books:<br><ul><li>Mark Murphy, <a href=\"http://commonsware.com/Android/\" target=\"_blank\" title=\"Link: http://commonsware.com/Android/\">The Busy Coder's Guide to Android Development</a>, CommonsWare.</li><li>Goetz et al., <a href=\"http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601\" target=\"_blank\">Java Concurrency in Practice</a>, Addison-Wesley, 2006.</li><li>Doug Lea,\u00a0<i><a href=\"http://www.amazon.com/Concurrent-Programming-Java-Principles-Pattern/dp/0201310090\" title=\"Link: http://www.amazon.com/Concurrent-Programming-Java-Principles-Pattern/dp/0201310090\">Concurrent Programming in Java</a></i>, Prentice Hall, 1999.</li><li>Gamma et at., <i><a href=\"http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780201633610\" title=\"Link: http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780201633610\">Design Patterns: Elements of Reusable Object-Oriented\u00a0</a></i><i><a href=\"http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780201633610\" title=\"Link: http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780201633610\">Software</a></i>, Addison-Wesley, Reading, MA, 1995..</li><li>Schmidt et al., <i><a href=\"http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780471606956\" title=\"Link: http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780471606956\">Pattern-Oriented Software Architecture, Vol 2: Patterns for\u00a0</a></i><i><a href=\"http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780471606956\" title=\"Link: http://www.tqlkg.com/click-7115529-10692263?sid=posa&URL=http://www.chegg.com/textbooks/9780471606956\">Concurrent and Networked Objects</a></i>, Wiley and Sons, 2000.</li>\n\n<li>Buschmann et al., <i><a href=\"http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Distributed/dp/0470059028/ref=pd_sim_b_1\" title=\"Link: http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Distributed/dp/0470059028/ref=pd_sim_b_1\">Pattern-Oriented Software Architecture:, Vol 4: A Pattern Language for Distributed Computing</a></i>, Wiley and Sons, 2007.</li>\n<li>Buschmann et al., <i><a href=\"http://www.amazon.com/Pattern-Oriented-Software-Architecture-Languages/dp/0471486485\" title=\"Link: http://www.amazon.com/Pattern-Oriented-Software-Architecture-Languages/dp/0471486485\">Pattern-Oriented Software Architecture, Vol 5\u00a0On Patterns and Pattern Langauges</a></i>, Wiley and Sons, 2007.</li>\n</ul>\n\n<div>Much of this material is available <a href=\"http://www.dre.vanderbilt.edu/~schmidt/tutorials.html\">online</a>.</div>","instructor":"Douglas C. Schmidt","categories":[{"id":4,"name":"Information, Tech & Design","mailing_list_id":null,"short_name":"infotech","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"},{"id":11,"name":"Computer Science: Systems & Security","mailing_list_id":null,"short_name":"cs-systems","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"},{"id":12,"name":"Computer Science: Software Engineering","mailing_list_id":null,"short_name":"cs-programming","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"}],"estimated_class_workload":"4-6 hours/week","name":"Pattern-Oriented Software Architectures for Concurrent and Networked Mobile Devices and Clouds","language":"en","university_logo_st":"","video_id":null,"courses":[{"grading_policy_distinction":"The class consists of lecture videos with integrated quiz\u00a0questions designed to ensure you understand the material covered in the videos.\u00a0\u00a0In recognition that not all participants have the same learning objectives or available time, the course is offered at two levels of engagement. Students who complete the <b>Mastery Track</b> (estimated time commitment:\u00a05 \u2013\u00a07 Hours Per Week) will receive a <u><i>Statement of Accomplishment with Distinction</i></u> that certifies mastery of the practice of the course content.\u00a0 In addition to completing the auto-graded weekly quizzes and final exam from the Standard Track, students in this track will also complete peer-graded short essays and peer-graded programming assignments.  The programming assignments will involve writing concurrent and networked software in popular pattern-oriented software architecture frameworks written in Java (such as <a href=\"http://developer.android.com/\">Android</a>) and C++ (such as <a href=\"http://www.dre.vanderbilt.edu/ACE\">ACE</a> and <a href=\"http://www.boost.org/\">Boost</a>).  This track is designed for those students wishing to achieve mastery of the course material and to understand its application in a real-world project context. The final grade for the Mastery Track will be based on the weekly quizzes (50% of the final grade), peer-graded short essays and peer-graded assignments (40% of the final grade) and a final exam (10% of the final grade). To receive a Statement of Accomplishment with Distinction, you have to obtain >= 70% of the maximum possible score.</p>\n\n","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":4,"duration_string":"10 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":970268,"start_month":3,"certificate_description":"This advanced undergraduate course teaches students how to apply patterns, pattern languages, and frameworks to alleviate the complexity of developing concurrent and networked software.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":"2013-05-13","certificates_ready":true,"signature_track_price":null,"statement_design_id":11,"signature_track_registration_open":false,"topic_id":234,"eligible_for_signature_track":false,"start_date":null,"status":1,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[1337829],"end_of_class_emails_sent":"2010-01-01","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"001","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"<div>The class consists of lecture videos with integrated quiz\u00a0questions designed to ensure you understand the material covered in the videos.\u00a0\u00a0In recognition that not all participants have the same learning objectives or available time, the course is offered at two levels of engagement.  Students who complete the <b>Standard Track</b> (estimated time commitment:\u00a0\u00a03 \u2013\u00a05 Hours Per Week) will receive a <u><i>Statement of Accomplishment</i></u> that certifies advanced proficiency with the course concepts, which\u00a0will be assessed by weekly auto-graded standalone quizzes.\u00a0 This track is designed for those who wish to engage the material by doing the auto-graded quizzes, final exam, and participating in the online discussion forums, but who may not have the time/interest to complete the peer-graded short essay questions and peer-graded programming assignments. The final grade for the Standard Track will be based on the weekly quizzes (80% of the final grade) and a final exam (20% of the final grade). To receive a Statement of Accomplishment, you have to obtain >= 70% of the maximum possible score.<br><br>\n\n","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/posa-001/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":"2010-01-01"},{"grading_policy_distinction":"","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":10,"duration_string":"8 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":970938,"start_month":3,"certificate_description":"This advanced undergraduate course teaches students how to apply patterns, pattern languages, and frameworks to alleviate the complexity of developing concurrent and networked software.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":null,"certificates_ready":false,"signature_track_price":null,"statement_design_id":11,"signature_track_registration_open":false,"topic_id":234,"eligible_for_signature_track":false,"start_date":null,"status":1,"start_year":2014,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[1337829,4639533],"end_of_class_emails_sent":null,"active":false,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"002","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"<div>The class consists of lecture videos with integrated quiz\u00a0questions designed to ensure you understand the material covered in the videos.\u00a0\u00a0In recognition that not all participants have the same learning objectives or available time, the course is offered at two levels of engagement:<br>\u00a0<br><b>Standard Track</b> \u2013 Estimated Time Commitment:\u00a0\u00a03 \u2013\u00a05 Hours Per Week<br>Students at this level receive a <u><i>Statement of Accomplishment</i></u> that certifies advanced proficiency with the course concepts, which\u00a0will be assessed by weekly auto-graded standalone quizzes.\u00a0 This track is designed for those who wish to engage the material by doing the auto-graded quizzes, final exam, and participating in the online discussion forums, but who may not have the time/interest to complete the peer-graded short essay questions and peer-graded programming assignments. The final grade for the Standard Track will be based on the weekly quizzes (80% of the final grade) and a final exam (20% of the final grade). To receive a Statement of Accomplishment, you have to obtain >= 70% of the maximum possible score.<br><br>\n\n<b>Mastery Track</b> \u2013 Estimated Time Commitment:\u00a05 \u2013\u00a07 Hours Per Week<br>Students at this level will receive a <u><i>Statement of Accomplishment</i></u> that certifies mastery of the practice of the course content.\u00a0 In addition to completing the auto-graded weekly quizzes and final exam from the Standard Track, students in this track will also complete peer-graded short essays and peer-graded programming assignments.  The programming assignments will involve writing concurrent and networked software in popular pattern-oriented software architecture frameworks written in Java (such as <a href=\"http://developer.android.com/\">Android</a>) and C++ (such as <a href=\"http://www.dre.vanderbilt.edu/ACE\">ACE</a> and <a href=\"http://www.boost.org/\">Boost</a>).  This track is designed for those students wishing to achieve mastery of the course material and to understand its application in a real-world project context. The final grade for the Mastery Track will be based on the weekly quizzes (50% of the final grade), peer-graded short essays and peer-graded assignments (40% of the final grade) and a final exam (10% of the final grade). To receive a Statement of Accomplishment, you have to obtain >= 70% of the maximum possible score.</p>\n\n\n","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/posa-002/","creator_id":1269982,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":null}],"about_the_instructor":"<img class=\"coursera-instructor-thumb\" src=\"http://www.dre.vanderbilt.edu/~schmidt/gifs/schmidt-coursera4.jpg\" width=\"200\" height=\"244\"><a href=\"http://www.dre.vanderbilt.edu/~schmidt\"></a><p><a href=\"http://www.dre.vanderbilt.edu/~schmidt\">Douglas C. Schmidt</a> is a Professor of Computer Science, Associate Chair of the Computer Science and Engineering program, and a Senior Researcher at the <a href=\"http://www.isis.vanderbilt.edu\">Institute for Software Integrated Systems</a>, all at <a href=\"http://www.vanderbilt.edu\">Vanderbilt University</a>. He has also been the Chief Technology Officer for the <a href=\"http://www.sei.cmu.edu\">Software Engineering Institute</a> at Carnegie Mellon University, where he was responsible for directing the technical vision and strategic R&D investments. </p><p>\n\nDr. Schmidt has <a href=\"http://www.dre.vanderbilt.edu/~schmidt/resume.html\">published 10 books and more than 500 technical papers</a> on software-related topics, including patterns, optimization techniques, and empirical analyses of object-oriented frameworks and domain-specific modeling environments that facilitate the development of distributed real-time and embedded (DRE) middleware and mission-critical applications running over data networks and embedded system interconnects. Dr. Schmidt has also led the development of <a href=\"http://www.dre.vanderbilt.edu/ACE\">ACE</a>, <a href=\"http://www.dre.vanderbilt.edu/TAO\">TAO</a>, and <a href=\"http://www.dre.vanderbilt.edu/CIAO\">CIAO</a> for the past two decades. These technologies are pattern-oriented DRE middleware frameworks used successfully by thousands of companies and agencies worldwide in many domains, including national defense and security, datacom/telecom, financial services, medical engineering, and massively multiplayer online gaming.</p>","university_logo":"","course-ids":[970268,970938],"display":true,"recommended_background":"<div>Ideally, students who take this course\u00a0will be\u00a0familiar with general\u00a0object-oriented design and programming concepts (such as encapsulation,\nabstraction, polymorphism, extensibility,\n and the Unified Modeling\nLanguage\n(UML)\n\n), fundamental object-oriented programming\u00a0language features (such as classes, inheritance, dynamic binding, and\u00a0generics available in Java, basic systems programming concepts (such as event handling,\u00a0processes/threads, synchronization, interprocess\u00a0communication, and dynamic linking), and networking terminology (such as client/server and peer-to-peer\u00a0architectures, TCP/IP, and layering).\u00a0 We will review object-oriented design, systems programming, and networking concepts and techniques, so students who understand how to read/write Java code examples should be fine.</div>"}

