{"about_the_course":"<p>This course will discuss the major ideas used today in the implementation of programming language compilers, including lexical analysis, parsing, syntax-directed translation, abstract syntax trees, types and type checking, intermediate languages, dataflow analysis, program optimization, code generation, and runtime systems. As a result, you will learn how a program written in a high-level language designed for humans is systematically translated into a program written in low-level assembly more suited to machines. Along the way we will also touch on how programming languages are designed, programming language semantics, and why there are so many different kinds of programming languages.</p>\n<p>The course lectures will be presented in short videos. To help you master the material, there will be in-lecture questions to answer, quizzes, and two exams: a midterm and a final. There will also be homework in the form of exercises that ask you to show a sequence of logical steps needed to derive a specific result, such as the sequence of steps a type checker would perform to type check a piece of code, or the sequence of steps a parser would perform to parse an input string. This checking technology is the result of ongoing research at Stanford into developing innovative tools for education, and we're excited to be the first course ever to make it available to students.</p>\nAn optional course project is to write a complete compiler for COOL, the Classroom Object Oriented Language. COOL has the essential features of a realistic programming language, but is small and simple enough that it can be implemented in a few thousand lines of code. Students who choose to do the project can implement it in either C++ or Java.<br>I hope you enjoy the course!\n<p><strong>Why Study Compilers?</strong></p>\nEverything that computers do is the result of some program, and all of the millions of programs in the world are written in one of the many thousands of programming languages that have been developed over the last 60 years. Designing and implementing a programming language turns out to be difficult; some of the best minds in computer science have thought about the problems involved and contributed beautiful and deep results. Learning something about compilers will show you the interplay of theory and practice in computer science, especially how powerful general ideas combined with engineering insight can lead to practical solutions to very hard problems. Knowing how a compiler works will also make you a better programmer and increase your ability to learn new programming languages quickly.\n<div></div>","subtitle_languages_csv":"","other_description":"","photo":"https://s3.amazonaws.com/coursera/topics/compilers/large-icon.png","preview_link":"https://class.coursera.org/compilers/lecture/preview","small_icon_hover":"https://s3.amazonaws.com/coursera/topics/compilers/small-icon.hover.png","large_icon":"https://s3.amazonaws.com/coursera/topics/compilers/large-icon.png","video":"sm0QQO-WZlM","university-ids":["stanford"],"video_baseurl":"https://d1a2y8pfnfh44t.cloudfront.net/sm0QQO-WZlM/","id":16,"universities":[{"rectangular_logo_svg":"","wordmark":null,"website_twitter":"","china_mirror":2,"favicon":"https://coursera-university-assets.s3.amazonaws.com/dc/581cda352d067023dcdcc0d9efd36e/favicon-stanford.ico","website_facebook":"","logo":"https://coursera-university-assets.s3.amazonaws.com/d8/4c69670e0826e42c6cd80b4a02b9a2/stanford.png","background_color":"","id":1,"location_city":"Palo Alto","location_country":"US","location_lat":37.44188340000000000,"location":"Palo Alto, CA, United States","primary_color":"#8C1515","abbr_name":"Stanford","website":"","description":"The Leland Stanford Junior University, commonly referred to as Stanford University or Stanford, is an American private research university located in Stanford, California on an 8,180-acre (3,310 ha) campus near Palo Alto, California, United States.","short_name":"stanford","landing_page_banner":"","mailing_list_id":null,"website_youtube":"","partner_type":1,"banner":"","location_state":"CA","name":"Stanford University","square_logo":"","square_logo_source":"","square_logo_svg":"","location_lng":-122.14301949999998000,"home_link":"http://online.stanford.edu/","class_logo":"https://coursera-university-assets.s3.amazonaws.com/21/9a0294e2bf773901afbfcb5ef47d97/Stanford_Coursera-200x48_RedText_BG.png","display":true}],"self_service_course_id":378,"short_description":"This course will discuss the major ideas used today in the implementation of programming language compilers. You will learn how a program written in a high-level language designed for humans is systematically translated into a program written in low-level assembly more suited to machines!","description":"","short_name":"compilers","target_audience":1,"faq":"<ul>\n<li><strong>Will I get a statement of accomplishment after completing this class?</strong>\n<p>Yes. Students who successfully complete the class will receive a statement of accomplishment signed by the instructor.</p>\n</li>\n<li><strong>How is the class structured?</strong>\n<p>Each week there will be a number of videos to watch, most of which will include an in-video quiz question to answer. Most weeks there will also be homeworks (done on-line) and a quiz. There will be also be a midterm and a final exam. For those doing the course project, there will be 5 programming assignments, which you will do on your own using infrastructure that we provide.</p>\n</li>\n<li><strong>Are the lectures available in a file format?</strong>\n<p>Yes. The slides from the lectures will be available in both annotated and unannotated form.</p>\n</li>\n<li><strong>Do I need a textbook?</strong>\n<p>No, no textbook is required for the class. However, you may find a textbook useful as a reference or to learn more details of some of the ideas discussed in the course. There are a number of good textbooks on compilers; here are three in particular:</p>\n<ol>\n<li>Compilers: Principles, Techniques, and Tools (Second Edition)<br>Alfred Aho, Monica Lam, Ravi Sethi, and Jeffrey Ullman.<br>Addison-Wesley</li>\n<li>Modern Compiler Implementation in Java (Second Edition)<br>Andrew Appel and Jens Palsberg.<br>Cambridge University Press</li>\n<li>Engineering a Compiler<br>Keith Cooper and Linda Torczon<br>Morgan Kaufman</li>\n</ol></li>\n<li><strong>How do I ask questions?</strong>\n<p>There will be an on-line discussion forum in which students can ask questions and receive answers. While the scale of an on-line class means that often the fastest (and best!) answer comes from another student, the course staff will monitor the discussions for accuracy and to address questions where the student community particularly wants to hear from the staff.</p>\n</li>\n<li><strong>Is the compiler project required?</strong>\n<p>No. You can take the class without doing the programming assignments.</p>\n</li>\n<li><strong>How difficult is the compiler project? What background and tools do I need?</strong>\n<p>This question is very hard to answer as the level of difficulty will vary depending on your programming background. As a rough guide, you should already be an experienced programmer and be comfortable writing substantial C++ or Java programs; writing a compiler is not a good way to learn either programming or these particular languages. The project also makes use of software tools, so you should also be comfortable learning to use new tools on your own. It is not a problem if you start the project but don't finish it; we will just consider you to be enrolled in the non-project option of the class in this case.</p>\n</li>\n</ul>","category-ids":["cs-systems","cs-programming"],"visibility":0,"course_syllabus":"","course_format":"","has_full_data":true,"small_icon":"https://s3.amazonaws.com/coursera/topics/compilers/small-icon.hover.png","suggested_readings":"","instructor":"Alex Aiken, Professor","categories":[{"id":11,"name":"Computer Science: Systems & Security","mailing_list_id":null,"short_name":"cs-systems","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"},{"id":12,"name":"Computer Science: Software Engineering","mailing_list_id":null,"short_name":"cs-programming","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"}],"estimated_class_workload":"8-10 hours/week, 10-20 hours/week with programming assignments","name":"Compilers","language":"en","university_logo_st":null,"video_id":null,"courses":[{"grading_policy_distinction":"The final grade consists of equally-weighted electronic quizzes (20% of the final grade), a midterm exam (15% of the final grade), a final exam (25% of the final grade, and four programming assignments (weighted 8%, 8%, 12%, 12% from first to last).  Over the length of the course, the student was required to write a compiler for a strongly-typed, object-oriented language.  A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally). To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score. ","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":23,"duration_string":"10 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":76,"start_month":4,"certificate_description":"The content of this course on programming language compilers included lexical analysis, parsing, syntax-directed translation, abstract syntax trees, types and type checking, intermediate languages, dataflow analysis, program optimization, code generation and runtime systems.","start_date_string":"23 April 2012","chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":"2012-12-06","certificates_ready":true,"signature_track_price":null,"statement_design_id":8,"signature_track_registration_open":false,"topic_id":16,"eligible_for_signature_track":false,"start_date":null,"status":0,"start_year":2012,"signature_track_certificate_combined_signature":null,"end_date":null,"notified_subscribers":true,"instructors":[221514],"end_of_class_emails_sent":"2010-01-01","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"12-001","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"The final grade consisted of electronic quizzes (33% of the final grade), a midterm exam (worth 25% of the final grade) , and a final exam (42% of the final grade). A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally).  To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score.","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/compilers/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":"","signature_track_close_time":null,"auth_review_completion_date":"2010-01-01"},{"grading_policy_distinction":"The final grade consists of equally-weighted electronic quizzes (20% of the final grade), a midterm exam (15% of the final grade), a final exam (25% of the final grade, and four programming assignments (weighted 8%, 8%, 12%, 12% from first to last) which, together, constituted a full compiler for the COOL programming language. A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally). To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score.","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":1,"duration_string":"11 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":150,"start_month":10,"certificate_description":"The content of this course on programming language compilers\nincluded lexical analysis, parsing, syntax-directed translation,\nabstract syntax trees, types and type checking, intermediate\nlanguages, dataflow analysis, program optimization, code\ngeneration and runtime systems.","start_date_string":"","chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":"2013-01-29","certificates_ready":true,"signature_track_price":null,"statement_design_id":8,"signature_track_registration_open":false,"topic_id":16,"eligible_for_signature_track":false,"start_date":null,"status":0,"start_year":2012,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[221514],"end_of_class_emails_sent":"2010-01-01","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"003","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"The final grade consisted of electronic quizzes (33% of the final grade), a midterm exam (worth 25% of the final grade) , and a final exam (42% of the final grade). A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally). To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score.","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/compilers-2012-002/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":"2010-01-01"},{"grading_policy_distinction":"","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":null,"duration_string":"","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":378,"start_month":null,"certificate_description":"","start_date_string":"","chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":null,"certificates_ready":false,"signature_track_price":null,"statement_design_id":null,"signature_track_registration_open":false,"topic_id":16,"eligible_for_signature_track":false,"start_date":null,"status":0,"start_year":null,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[],"end_of_class_emails_sent":null,"active":true,"eligible_for_certificates":false,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"002","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/compilers-selfservice/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":null},{"grading_policy_distinction":"The final grade consists of equally-weighted electronic quizzes (20% of the final grade), a midterm exam (15% of the final grade), a final exam (25% of the final grade, and four programming assignments (weighted 8%, 8%, 12%, 12% from first to last) which, together, constituted a full compiler for the COOL programming language. A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally). To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score.","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":11,"duration_string":"11 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":970514,"start_month":2,"certificate_description":"The content of this course on programming language compilers\nincluded lexical analysis, parsing, syntax-directed translation,\nabstract syntax trees, types and type checking, intermediate\nlanguages, dataflow analysis, program optimization, code\ngeneration and runtime systems.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":"2013-05-09","certificates_ready":true,"signature_track_price":null,"statement_design_id":8,"signature_track_registration_open":false,"topic_id":16,"eligible_for_signature_track":false,"start_date":null,"status":1,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[221514],"end_of_class_emails_sent":"2010-01-01","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"004","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"The final grade consisted of electronic quizzes (33% of the final grade), a midterm exam (worth 25% of the final grade) , and a final exam (42% of the final grade). A total of 2.5% extra credit was available for completing the DeduceIt programming problems (each problem weighted equally). To receive a Statement of Accomplishment, you must have obtained 70% or more of the maximum possible score.","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/compilers-003/","creator_id":3,"proctored_exam_completion_date":null,"university_logo":null,"signature_track_close_time":null,"auth_review_completion_date":"2010-01-01"}],"about_the_instructor":"<p><img src=\"http://theory.stanford.edu/~aiken/personal/pictures/aiken2010b.jpg\" class=\"coursera-instructor-thumb\"> <a href=\"http://theory.stanford.edu/~aiken/\">Alex Aiken </a> is a Professor of Computer Science at Stanford University, where he holds the Alcatel-Lucent Chair. Alex received his Bachelors degree in Computer Science and Music from Bowling Green State University in 1983 and his Ph.D. from Cornell in 1988. Alex was a Research Staff Member at the IBM Almaden Research Center (1988-1993) and a Professor in the EECS department at UC Berkeley (1993-2003) before joining Stanford in 2003. He is an ACM Fellow, a recipient of Phi Beta Kappa's Teaching Award, a former National Young Investigator, and has served on a number of corporate advisory boards. Alex's research interests cover a range of topics in programming languages, compilers, and software engineering.</p>","university_logo":"","course-ids":[76,150,378,970514],"display":true,"recommended_background":""}

