{"about_the_course":"Learn many of the concepts that underlie all programming languages. Develop\na programming style known as functional programming and contrast it with\nobject-oriented programming. Through experience writing programs and studying\nthree different languages, learn the key issues in designing and using\nprogramming languages, such as modularity and the complementary benefits\nof static and dynamic typing. This course is neither particularly theoretical\nnor just about programming specifics \u2013 it will give you a framework for\nunderstanding how to use language constructs effectively and how to design\ncorrect and elegant programs. By using different languages, you learn to\nthink more deeply than in terms of the particular syntax of one language.\nThe emphasis on functional programming is essential for learning how to\nwrite robust, reusable, composable, and elegant programs \u2013 in any language.","subtitle_languages_csv":"","other_description":"","photo":"https://coursera-course-photos.s3.amazonaws.com/02/c44a1233fcf277511c7720292324e3/course_logo.jpg","preview_link":null,"small_icon_hover":"https://coursera-course-photos.s3.amazonaws.com/e1/644d37da2af639d0c9d1f4fca323c2/course_logo.jpg","large_icon":"https://coursera-course-photos.s3.amazonaws.com/f2/e2d37549671b4a0c04b4f40669e1c9/course_logo.jpg","video":"","university-ids":["uw"],"video_baseurl":"","id":117,"universities":[{"rectangular_logo_svg":"","wordmark":null,"website_twitter":"UW","china_mirror":1,"favicon":"https://coursera-university-assets.s3.amazonaws.com/98/7480c1f9271144aa75fe024a1ad5a0/favicon-uw.ico","website_facebook":"UofWA","logo":"https://coursera-university-assets.s3.amazonaws.com/53/2f0ff155b3390e3d7190c363a4a045/uw-logo-coursera-transparent.png","background_color":"","id":15,"location_city":"Seattle","location_country":"US","location_lat":47.60620950000000000,"location":"Seattle, WA","primary_color":"#38255A","abbr_name":"Washington","website":"https://www.washington.edu/","description":"Founded in 1861, the University of Washington is one of the oldest state-supported institutions of higher education on the West Coast and is one of the preeminent research universities in the world.","short_name":"uw","landing_page_banner":"https://coursera-university-assets.s3.amazonaws.com/d0/f1be9c6b196a5a0446da96548a85b6/banner-uw1.jpg","mailing_list_id":null,"website_youtube":"user/uwhuskies","partner_type":1,"banner":"https://coursera-university-assets.s3.amazonaws.com/5d/7f56a74b7b3009b4a888e372a41f67/banner-uw1.jpg","location_state":"WA","name":"University of Washington","square_logo":"https://coursera-university-assets.s3.amazonaws.com/8a/903cf68039c31a207eb7eafff458f7/w-patch-purple.png","square_logo_source":"https://coursera-university-assets.s3.amazonaws.com/76/45ce3d3eba0b28c763eacbb2387322/w-patch-purple.png","square_logo_svg":"","location_lng":-122.33207080000000000,"home_link":null,"class_logo":"","display":true}],"self_service_course_id":null,"short_description":"Investigate the basic concepts behind programming languages, with a strong emphasis on the techniques and benefits of functional programming. Use the programming languages ML, Racket, and Ruby in ways that will teach you how the pieces of a language fit together to create more than the sum of the parts. Gain new software skills and the concepts needed to learn new languages on your own.","description":"","short_name":"proglang","target_audience":0,"faq":"","category-ids":["cs-programming"],"visibility":0,"course_syllabus":"<p>Note: About half the students in prior offerings report an estimated workload of 8-12\n    hours / week is accurate while most of the other half\n    spent more time -- 15 hours / week or more. Workload naturally differs for different people depending\n    on one's background. Do see the recommended-background section below.</p>\n<p>Topics (most of which may not mean anything to you until you take the\n    course):</p>\n<ul>\n    <li>Syntax vs. semantics vs. idioms vs. libraries vs. tools</li>\n    <li>ML basics (bindings, conditionals, records, functions)</li>\n    <li>Recursive functions and recursive types</li>\n    <li>Benefits of no mutation</li>\n    <li>Algebraic datatypes, pattern matching</li>\n    <li>Tail recursion</li>\n    <li>First-class functions and function closures</li>\n    <li>Lexical scope</li>\n    <li>Currying</li>\n    <li>Syntactic sugar</li>\n    <li>Equivalence and effects</li>\n    <li>Parametric polymorphism and container types</li>\n    <li>Type inference</li>\n    <li>Abstract types and modules</li>\n    <li>Racket basics</li>\n    <li>Dynamic vs. static typing</li>\n    <li>Laziness, streams, and memoization</li>\n    <li>Implementing languages, especially higher-order functions</li>\n    <li>Macros</li>\n    <li>Eval</li>\n    <li>Ruby basics</li>\n    <li>Object-oriented programming is dynamic dispatch</li>\n    <li>Pure object-orientation</li>\n    <li>Implementing dynamic dispatch</li>\n    <li>Multiple inheritance, interfaces, and mixins</li>\n    <li>OOP vs. functional decomposition and extensibility</li>\n    <li>Subtyping for records, functions, and objects</li>\n    <li>Subtyping</li>\n    <li>Class-based subtyping</li>\n    <li>Subtyping vs. parametric polymorphism; bounded polymorphism</li>\n</ul>","course_format":"Video segments have short question-and-answer sections, but the main work\nwill be seven homework assignments that involve writing small programs.\nThe programming assignments will be automatically graded <i>and</i> students\nwill peer-assess each other's submissions for style. Critiquing other\u2019s\nwork and receiving comments about your own are invaluable learning experiences.\nThe course also has a midterm exam and a final exam.","has_full_data":true,"small_icon":"https://coursera-course-photos.s3.amazonaws.com/e1/644d37da2af639d0c9d1f4fca323c2/course_logo.jpg","suggested_readings":"Course videos and programming exercises serve as the bulk of class content.\nWritten notes by the instructor are also available and serve as a valuable\nresource.","instructor":"Dan  Grossman","categories":[{"id":12,"name":"Computer Science: Software Engineering","mailing_list_id":null,"short_name":"cs-programming","description":"Our wide range of courses allows students to explore topics from many different fields of study. Sign up for a class today and join our global community of students and scholars!"}],"estimated_class_workload":"8-16 hours/week","name":"Programming Languages","language":"en","university_logo_st":null,"video_id":null,"courses":[{"grading_policy_distinction":"","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":14,"duration_string":"10 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":352,"start_month":1,"certificate_description":"This course investigates the basic concepts behind programming languages, with a strong emphasis on the techniques and benefits of functional programming along with many other topics.","start_date_string":"January 2013","chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":"2013-04-02","certificates_ready":true,"signature_track_price":null,"statement_design_id":73,"signature_track_registration_open":false,"topic_id":117,"eligible_for_signature_track":false,"start_date":null,"status":0,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[873260],"end_of_class_emails_sent":"2010-01-01","active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"12-001","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"The final grade was based on 7 assignments each worth 10% of the final grade, with 90% of the 10% produced from auto-grading and the remaining 10% coming from peer assessment.  The course had two exams each worth 15% of the course grade.","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/proglang-2012-001/","creator_id":null,"proctored_exam_completion_date":null,"university_logo":"","signature_track_close_time":null,"auth_review_completion_date":"2010-01-01"},{"grading_policy_distinction":"","ace_track_price_display":null,"signature_track_certificate_design_id":null,"ace_semester_hours":null,"start_day":3,"duration_string":"10 weeks","signature_track_last_chance_time":null,"signature_track_additional_notes":null,"certificate_ready_user_id":null,"id":970860,"start_month":10,"certificate_description":"This course investigates the basic concepts behind programming languages, with a strong emphasis on the techniques and benefits of functional programming along with many other topics.","start_date_string":null,"chegg_session_id":"","signature_track_regular_price":null,"grades_release_date":null,"certificates_ready":false,"signature_track_price":null,"statement_design_id":73,"signature_track_registration_open":false,"topic_id":117,"eligible_for_signature_track":false,"start_date":null,"status":1,"start_year":2013,"signature_track_certificate_combined_signature":"","end_date":null,"notified_subscribers":true,"instructors":[873260],"end_of_class_emails_sent":null,"active":true,"eligible_for_certificates":true,"signature_track_certificate_signature_blurb":"","deployed":true,"ace_close_date":null,"name":"002","textbooks":[],"signature_track_open_time":null,"eligible_for_ACE":false,"grading_policy_normal":"The final grade was based on 7 assignments each worth 10% of the final grade, with 90% of the 10% produced from auto-grading and the remaining 10% coming from peer assessment.  The course had two exams each worth 15% of the course grade.","ace_open_date":null,"signature_track_last_refund_date":null,"home_link":"https://class.coursera.org/proglang-002/","creator_id":873260,"proctored_exam_completion_date":null,"university_logo":"","signature_track_close_time":null,"auth_review_completion_date":null}],"about_the_instructor":"<img src=\"https://s3.amazonaws.com/coursera/topics/proglang/instructor-1.jpg\" style=\"width: 250px;\" class=\"coursera-instructor-thumb\"><strong>Dan Grossman Associate Professor, Computer Science & Engineering, University of Washington PhD, Cornell University</strong> <br>Dan Grossman has taught programming languages at the University of Washington since 2003. During his 9 years as a faculty member, his department\u2019s undergraduate students have elected him \u201cteacher of the year\u201d twice and awarded him second place once. His research, resulting in over 50 peer-reviewed publications, has covered the theory, design, and implementation of programming languages, as well as connections to computer architecture and software engineering. Dan serves on the steering committee creating the 2013 ACM/IEEE-CS Computer Science Curriculum and leads the subcommittee on Programming Languages.<br><br>","university_logo":"","course-ids":[352,970860],"display":true,"recommended_background":"The course assumes students are familiar with programming covered by most\nintroductory courses -- this is <i>not</i> an introductory programming course.\u00a0 Conversely, it is also <i>not</i> a particularly advanced course -- a couple good prior programming courses should be enough.\u00a0 Students should be comfortable with variables, conditionals,\narrays, linked lists, stacks, and recursion (though recursion will be reviewed\nand expanded upon), and the difference between an interface and an implementation.\nStudents should be eager to write programs in languages new to them.\u00a0 Later parts\nof the course analyze basic object-oriented concepts and contrast them\nwith those of other languages, so familiarity with Java or a closely related\nlanguage (e.g., C#) is helpful, but not required for homework assignments."}

